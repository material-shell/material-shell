import * as Gdk from 'gdk';
import * as Gio from 'gio';
import * as GLib from 'glib';
import * as GObject from 'gobject';
import * as Gtk from 'gtk4';
import { registerGObjectClass } from 'src/utils/gjs';

const ExtensionUtils = imports.misc.extensionUtils;
const Me = ExtensionUtils.getCurrentExtension();
const schemaSource = Gio.SettingsSchemaSource.new_from_directory(
    Me.dir.get_child('schemas').get_path(),
    Gio.SettingsSchemaSource.get_default(),
    false
);

enum WidgetType {
    BOOLEAN = 0,
    COMBO = 1,
    INT = 2,
    DECIMAL = 3,
    INPUT = 4,
    COLOR = 5,
    CUSTOM = 6,
}

const SettingListBoxRow = GObject.registerClass(
    {
        GTypeName: 'SettingListBox',
        Template: Me.dir.get_child('setting_list_box_row.ui').get_uri(),
        Properties: {
            'settings-widget': GObject.ParamSpec.object(
                'settings-widget',
                'Settings Widget',
                'The widget in which the user sets the settings value',
                GObject.ParamFlags.READWRITE,
                null,
            ),
        },
    },
    class SettingListBoxRow extends Gtk.ListBoxRow {
        private _settings_widget: GObject.Object;

        _init(params = {}) {
            super._init(params);
        }

        get settings_widget(): GObject.Object {
            return this._settings_widget;
        }

        set settings_widget(value: GObject.Object) {
            this._settings_widget = value;
        }
    }
);

@registerGObjectClass
class HotkeysTab extends GObject.Object {
    key: string;
    summary: string;
    mods: number;
    accelKey: number;
}

const HotkeyListBox = GObject.registerClass(
    {
        GTypeName: 'HotkeyListBox',
        Template: Me.dir.get_child('hotkey_list_box.ui').get_uri(),
    },
    class HotkeyListBox extends Gtk.ListBox {
        _init(params = {}) {
            super._init(params);
        }

        constructor(schema: string) {
            super();
        }
    }
);

const HotkeyListBoxRow = GObject.registerClass(
    {
        GTypeName: 'HotkeyListBoxRow',
        Template: Me.dir.get_child('hotkey_list_box_row.ui').get_uri(),
    },
    class HotkeyListBoxRow extends Gtk.ListBoxRow {
        private _accel_label: Gtk.Label;
        private _hotkey_label: Gtk.Label;

        _init(params = {}) {
            super._init(params);
        }

        constructor(hotkeyName: string, accel: string) {
            super();

            this._accel_label.set_text(hotkeyName);
            this._hotkey_label.set_text(accel);
        }
    }
);

const SettingCategoryListBox = GObject.registerClass(
    {
        GTypeName: 'SettingCategoryListBox',
        Template: Me.dir.get_child('setting_category_list_box.ui').get_uri(),
        Properties: {
            'title': GObject.ParamSpec.string(
                'title',
                'Title',
                'The title of the category',
                GObject.ParamFlags.READWRITE,
                "",
            ),
        },
    },
    class SettingCategoryListBox extends Gtk.ListBox {
        private _title_label: Gtk.Label;
        private schema: string;
        public settings: Gio.Settings;

        _init(params = {}) {
            super._init(params);
        }

        constructor(title: string, schema: string) {
            super();

            this.schema = schema;
            this.settings = new Gio.Settings({
                settings_schema: schemaSource.lookup(schema, false),
            });
            this.title = title;
        }

        get title(): string {
            return this._title_label.get_text()
        }

        set title(value: string) {
            this._title_label.set_text(`<span size="medium">${value}</span>`);
        }

        addSetting(key: string, type: WidgetType, customWidget?: Gtk.Widget) {
            let row = new SettingListBoxRow();
            const settingKey = this.settings.settings_schema.get_key(key);

            let widget;
            switch (type) {
                case WidgetType.BOOLEAN:
                    widget = new Gtk.Switch({ valign: Gtk.Align.CENTER });
                    this.settings.bind(
                        key,
                        widget,
                        'active',
                        Gio.SettingsBindFlags.DEFAULT
                    );
                    break;

                case WidgetType.COMBO:
                    widget = new Gtk.ComboBoxText();
                    settingKey
                        .get_range()
                        .get_child_value(1)
                        .recursiveUnpack()
                        .forEach((value) => {
                            widget.append(value, value);
                        });
                    this.settings.bind(
                        key,
                        widget,
                        'active-id',
                        Gio.SettingsBindFlags.DEFAULT
                    );
                    break;

                case WidgetType.COLOR: {
                    widget = new Gtk.ColorButton();
                    const rgba = new Gdk.RGBA();
                    rgba.parse(this.settings.get_string(key));
                    widget.set_rgba(rgba);
                    widget.connect('notify::color', (button) => {
                        const rgba = button.get_rgba();
                        const css = rgba.to_string();
                        const hexString = cssHexString(css);
                        this.settings.set_string(key, hexString);
                    });
                    break;
                }
                case WidgetType.INT:
                    widget = Gtk.SpinButton.new_with_range(0, 1000, 1);
                    this.settings.bind(
                        key,
                        widget.get_adjustment(),
                        'value',
                        Gio.SettingsBindFlags.DEFAULT
                    );
                    break;

                case WidgetType.DECIMAL:
                    widget = Gtk.SpinButton.new_with_range(0, 1, 0.1);
                    this.settings.bind(
                        key,
                        widget.get_adjustment(),
                        'value',
                        Gio.SettingsBindFlags.DEFAULT
                    );
                    break;

                case WidgetType.INPUT:
                    widget = Gtk.Entry.new();
                    this.settings.bind(
                        key,
                        widget,
                        'text',
                        Gio.SettingsBindFlags.DEFAULT
                    );
                    break;

                case WidgetType.CUSTOM:
                    widget = customWidget;
                    break;
            }

            row.settings_widget = widget;

            this.append(row);
        }
    }
);

const PrefsWidget = GObject.registerClass(
    {
        GTypeName: 'PrefsWidget',
        Template: Me.dir.get_child('prefs.ui').get_uri(),
    },
    class PrefsWidget extends Gtk.Box {
        private _inner_box: Gtk.Box;

        _init(params = {}) {
            super._init(params);
        }

        constructor() {
            super();

            const theme = new SettingCategoryListBox(
                'Theme',
                'org.gnome.shell.extensions.materialshell.theme'
            );

            theme.addSetting('theme', WidgetType.COMBO);
            theme.addSetting('primary-color', WidgetType.COLOR);
            theme.addSetting('vertical-panel-position', WidgetType.COMBO);
            theme.addSetting('horizontal-panel-position', WidgetType.COMBO);
            theme.addSetting('panel-size', WidgetType.INT);
            theme.addSetting('panel-opacity', WidgetType.INT);
            theme.addSetting('panel-icon-style', WidgetType.COMBO);
            theme.addSetting('panel-icon-color', WidgetType.BOOLEAN);
            theme.addSetting('taskbar-item-style', WidgetType.COMBO);
            theme.addSetting('surface-opacity', WidgetType.INT);
            theme.addSetting('blur-background', WidgetType.BOOLEAN);
            theme.addSetting('clock-horizontal', WidgetType.BOOLEAN);
            theme.addSetting('clock-app-launcher', WidgetType.BOOLEAN);
            theme.addSetting('focus-effect', WidgetType.COMBO);
            this._inner_box.append(theme);

            const tweaks = new SettingCategoryListBox(
                'Tweaks',
                'org.gnome.shell.extensions.materialshell.tweaks'
            );

            tweaks.addSetting('cycle-through-windows', WidgetType.BOOLEAN);
            tweaks.addSetting('cycle-through-workspaces', WidgetType.BOOLEAN);
            tweaks.addSetting('disable-notifications', WidgetType.BOOLEAN);
            tweaks.addSetting('enable-persistence', WidgetType.BOOLEAN);
            this._inner_box.append(tweaks);

            const layouts = new SettingCategoryListBox(
                'Tiling layouts',
                'org.gnome.shell.extensions.materialshell.layouts'
            );

            const tilingLayouts = [
                'maximize',
                'split',
                'half',
                'half-horizontal',
                'half-vertical',
                'ratio',
                'grid',
                'float',
                'simple',
                'simple-horizontal',
                'simple-vertical',
            ];

            layouts.addSetting(
                'default-layout',
                WidgetType.CUSTOM,
                getDefaultLayoutComboBox(tilingLayouts, layouts.settings)
            );

            tilingLayouts.forEach((layoutKey) => {
                layouts.addSetting(layoutKey, WidgetType.BOOLEAN);
                if (layoutKey === 'ratio') {
                    layouts.addSetting('ratio-value', WidgetType.DECIMAL);
                }
            });

            layouts.addSetting('gap', WidgetType.INT);
            layouts.addSetting('use-screen-gap', WidgetType.BOOLEAN);
            layouts.addSetting('screen-gap', WidgetType.INT);
            layouts.addSetting('tween-time', WidgetType.DECIMAL);
            layouts.addSetting('windows-excluded', WidgetType.INPUT);
            this._inner_box.append(layouts);
        }
    }
);

function cssHexString(css: string) {
    let rrggbb = '#';
    let start: number;
    for (let loop = 0; loop < 3; loop++) {
        let end = 0;
        let xx = '';
        for (let loop = 0; loop < 2; loop++) {
            for (; ;) {
                const x = css.slice(end, end + 1);
                if (x == '(' || x == ',' || x == ')') break;
                end++;
            }
            if (loop == 0) {
                end++;
                start = end;
            }
        }
        xx = parseInt(css.slice(start, end)).toString(16);
        if (xx.length == 1) xx = `0${xx}`;
        rrggbb += xx;
        css = css.slice(end);
    }
    return rrggbb;
}

function getDefaultLayoutComboBox(
    tilingLayouts: string[],
    setting: Gio.Settings
) {
    const widget = new Gtk.ComboBoxText();
    const refreshComboBox = () => {
        widget.remove_all();
        tilingLayouts.forEach((layoutKey) => {
            if (setting.get_boolean(layoutKey)) {
                widget.append(layoutKey, layoutKey);
            }
        });
    };
    tilingLayouts.forEach((layoutKey) => {
        if (setting.get_boolean(layoutKey)) {
            widget.append(layoutKey, layoutKey);
        }
        setting.connect(`changed::${layoutKey}`, refreshComboBox);
    });
    setting.bind(
        'default-layout',
        widget as any as GObject.Object,
        'active-id',
        Gio.SettingsBindFlags.DEFAULT
    );
    return widget;
}


export function buildGtk4() {
    return new PrefsWidget();
}
